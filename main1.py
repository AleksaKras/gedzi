import time

import telebot
import datetime
from pymongo import MongoClient
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

bot = telebot.TeleBot("###", protect_content=True)


class DataBase:
    def __init__(self):
        cluster = MongoClient()
        self.db = cluster[""]
        self.users = self.db["Users"]
        self.questions = self.db["Questions"]

    def get_user(self, chat_id):
        user = self.users.find_one({"chat_id": chat_id})
        today = str(datetime.date.today())
        if user is not None:
            return user

        user = {
            "chat_id": chat_id,
            "is_passing": False,
            "is_passed": False,
            "question_index": None,
            "category": None,
            'vata': False,
            'done': False,
            "answers": [],
            'date': today,
        }
        #print(user)

        self.users.insert_one(user)

        return user

    def set_user(self, chat_id, update):
        self.users.update_one({"chat_id": chat_id}, {"$set": update})

        def get_question(self, index, category):
            # print('ind', index, category)
            return self.questions.find_one({"question": index, "category": category})

    def questions_count(self, category):
        # print('category', category)
        return len(list(self.questions.find({"category": category})))

    def users_count(self):
        return len(list(self.users.find()))

    def vata_count(self):
        return len(list(self.users.find({'vata':True})))

    def day_users_count(self):
        today = str(datetime.date.today())
        return len(list(self.users.find({'date':today})))

    def day_vata_count(self):
        today = str(datetime.date.today())
        return len(list(self.users.find({'vata':True, 'date':today})))




db = DataBase()


@bot.message_handler(commands=["start"])
def start(message):
    user = db.get_user(message.chat.id)

    # checking of second activity
    if user["is_passed"]:
        bot.send_message(message.from_user.id, "–î—Ä—É–∂–µ, —Ç–∏ –≤–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–≤ —Ü–µ–π –∫–≤–µ—Å—Çüò• \n–†–µ–∂–∏–º –ß—ñ—Ç–µ—Ä–∞ –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ", protect_content=True)
        return

    if user["is_passing"]:
        return

    bot.send_message(message.from_user.id,
                     '''
                     –ü—Ä–∏–≤—ñ—Ç —é–Ω–∏–π —à—É–∫–∞—á—É –ø—Ä–∏–≥–æ–¥ —ñ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–∞ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó –û–±—ñ–Ω–æ—Ä—É —è –∑–∞—Ö–æ–≤–∞–≤ –¥–ª—è —Ç–µ–±–µ —Å–∫–∞—Ä–±, —è–∫–∏–π —Å–∞–º –æ–±–æ–∂–Ω—é—é –≤—ñ–¥ —â–∏—Ä–æ–≥–æ —Å–µ—Ä—Ü—è. 
–ó–∞—Ä–∞–∑ —Ç–∏ –∑–Ω–∞—Ö–æ–¥–∏—à—Å—è –Ω–∞ –ø–æ—á–∞—Ç–∫—É –Ω–∞—à–æ—ó –ø–æ–¥–æ—Ä–æ–∂—ñ —É –ø–æ—à—É–∫–∞—Ö –µ–ª—å—Ñ—ñ–π—Å—å–∫–∏—Ö —Å–∫–∞—Ä–±—ñ–≤.''')
    bot.send_sticker(message.from_user.id, "CAACANQQ", protect_content=True)
    keyboard = [
        [InlineKeyboardButton("–†–æ–∑–ø–æ—á–∞—Ç–∏ –∫–≤–µ—Å—Ç", callback_data="rules")],
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    bot.send_message(message.from_user.id, "–ì–æ—Ç–æ–≤–∏–π —Ä–æ–∑–ø–æ—á–∞—Ç–∏?",
                     reply_markup=reply_markup, protect_content=True)


@bot.callback_query_handler(func=lambda call: call.data.startswith("rules"))
def category(query):
    user = db.get_user(query.message.chat.id)

    try:
        bot.delete_message(query.message.chat.id, query.message.id)
    except:
        pass
    if user["is_passed"]:  
        bot.send_message(query.message.chat.id, "–î—Ä—É–∂–µ, —Ç–∏ –≤–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–≤ —Ü–µ–π –∫–≤–µ—Å—Çüò• \n–†–µ–∂–∏–º –ß—ñ—Ç–µ—Ä–∞ –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ")
        return
    bot.send_message(query.message.chat.id, '''–Ü—Å–Ω—É—î 5 —Ä—ñ–∑–Ω–∏—Ö —à–ª—è—Ö—ñ–≤ –¥–æ —Å–∫–∞—Ä–±—É. –û–±–∏—Ä–∞–π —Å–≤—ñ–π —Ç–∞ –ø—Ä–∏—Ç—Ä–∏–º—É–π—Å—è —Ç—ñ–ª—å–∫–∏ –π–æ–≥–æ. 
    –ó–∞–≤–¥–∞–Ω–Ω—è –∫–≤–µ—Å—Ç–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É.''')

    bot.send_message(query.message.chat.id, '''
    –ö–æ–∂–µ–Ω –≤—ñ–¥—á–∞–π–¥—É—Ö–∞ –∑–∞—Å–ª—É–≥–æ–≤—É—î –Ω–∞ —Å–≤—ñ–π –ø—Ä–∏–∑ —ñ —Ç–∏ –π–æ–≥–æ —Ç–µ–∂ –≤—ñ–¥—à—É–∫–∞—î—à. 
<b>–°–ø–æ—á–∞—Ç–∫—É –¥–µ–∫—ñ–ª—å–∫–∞ –ø—Ä–∞–≤–∏–ª:
    ''', parse_mode='html')

    db.set_user(query.message.chat.id, {"question_index": 0})

    user = db.get_user(query.message.chat.id)

    keyboard = [

        [InlineKeyboardButton("1. –ü–µ—Ä–µ–ª—ñ—Ç", callback_data="cat1")],
        [InlineKeyboardButton("2. –í–µ—Å–µ–ª–∫–∞", callback_data="cat2")],
        [InlineKeyboardButton("3. –ú–µ—Ä–µ—Ö—Ç—ñ–Ω–Ω—è ", callback_data="cat3")],
        [InlineKeyboardButton("4. –°—Ç–µ–∂–∫–∞ ", callback_data="cat4")],
        [InlineKeyboardButton("5. –î—Ä–∞–∫–æ–Ω—è—á—ñ , callback_data="cat5")]

    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    bot.send_message(query.message.chat.id, "–û–±–µ—Ä–∏ —Å–≤—ñ–π –º–∞—Ä—à—Ä—É—Ç –∫–≤–µ—Å—Ç—É:",
                     reply_markup=reply_markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("cat"))
def category(query):
    user = db.get_user(query.message.chat.id)

    if user["is_passed"]:  
        bot.send_message(query.message.chat.id, "–î—Ä—É–∂–µ, —Ç–∏ –≤–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–≤ —Ü–µ–π –∫–≤–µ—Å—Çüò• \n–†–µ–∂–∏–º –ß—ñ—Ç–µ—Ä–∞ –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ")
        return
    try:
        bot.delete_message(query.message.chat.id, query.message.id)
    except:
        pass
    bot.send_sticker(query.message.chat.id,
                     'CAACAgIAANQQ')
    if query.data == "cat1":
        index_of_category = 0
        bot.send_message(query.message.chat.id,
                         '''
<b>–ü—ñ–¥–∫–∞–∑–∫–∞, –¥–µ —à—É–∫–∞—Ç–∏ –ø–µ—Ä—à—É –ª–µ–≥–µ–Ω–¥—É:</b
\n–®—É–∫–∞–π –Ω–∞—Å—Ç—É–ø–Ω—É –ø—ñ–¥–∫–∞–∑–∫—É —É –º—ñ—Å—Ü—ñ –∑–±–æ—Ä—É —Ç—Ä–æ–ª—ñ–≤‚Ä¶</i>
                         ''', parse_mode='html')
    elif query.data == "cat2":
        bot.send_message(query.message.chat.id,
                         '''
<b>–ü—ñ–¥–∫–∞–∑–∫–∞, –¥–µ —à—É–∫–∞—Ç–∏ –ø–µ—Ä—à—É –ª–µ–≥–µ–Ω–¥—É:</b>
–∑–∞–≥–∞–¥—É—é—Ç—å –±–∞–∂–∞–Ω–Ω—è.</i>
                         ''', parse_mode='html')
        index_of_category = 1
    elif query.data == "cat3":
        bot.send_message(query.message.chat.id, '''
–∏–Ω–∞—î.
\n–®—É–∫–∞–π –Ω–∞—Å—Ç—É–ø–Ω—É –ø—ñ–¥–∫–∞–∑–∫—É —É –º—ñ—Å—Ü—ñ –¥–µ —Ç–∏ –∑–¥—ñ–π–º–∞—î—à—Å—è –≤–∏—â–µ –±—É–¥–∏–Ω–æ—á–∫—ñ–≤.</i>
''', parse_mode='html')
        index_of_category = 2
    elif query.data == "cat4":
        bot.send_message(query.message.chat.id, '''
    <b>–ü—ñ–¥–∫–∞–∑–∫–∞, –¥–µ —à—É–∫–∞—Ç–∏ –ø–µ—Ä—à—É –ª–µ–≥–µ–Ω–¥—É:</b>
–∏ —Ö–æ–¥–∏–≤
\n–®—É–∫–∞–π –∫—é–∞—Ä –∫–æ–¥ —Ç–∞–º, –¥–µ –≥—Ä–∏–±–∞–º–∏ –º–æ–∂–Ω–∞ –ø–æ–ª—ñ–∫—É–≤–∞—Ç–∏ —É—Å–µ –Ω–∞ —Å–≤—ñ—Ç—ñ.</i>
    ''', parse_mode='html')
        index_of_category = 3
    elif query.data == "cat5":
        bot.send_message(query.message.chat.id, '''
    <b>–ü—ñ–¥–∫–∞–∑–∫–∞, –¥–µ —à—É–∫–∞—Ç–∏ –ø–µ—Ä—à—É –ª–µ–≥–µ–Ω–¥—É:</b
    ''', parse_mode='html')
        index_of_category = 4

    db.set_user(query.message.chat.id, {"question_index": 0, "category": index_of_category, "is_passing": True})
    user["question_index"] = 0
    user["category"] = index_of_category

    keyboard = [
        [InlineKeyboardButton("–ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data="first")], ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    bot.send_message(query.message.chat.id, "üôå–ó–Ω–∞–π—à–æ–≤ –ª–µ–≥–µ–Ω–¥—É, –æ–∑–Ω–∞–π–æ–º–∏–≤—Å—è –∑ –Ω–µ—é —ñ –≥–æ—Ç–æ–≤–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è‚ùì‚ùì‚ùì",
                     reply_markup=reply_markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("first"))
def first_question(query):
    user = db.get_user(query.message.chat.id)

    if user["is_passed"]:  
        bot.send_message(query.message.chat.id, "–î—Ä—É–∂–µ, —Ç–∏ –≤–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–≤ —Ü–µ–π –∫–≤–µ—Å—Çüò• \n–†–µ–∂–∏–º –ß—ñ—Ç–µ—Ä–∞ –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ")
        return
    try:
        bot.delete_message(query.message.chat.id, query.message.id - 1)
        bot.delete_message(query.message.chat.id, query.message.id)
    except:
        pass

    post = get_question_message(user)
    # print(post)
    if post is not None:
        bot.send_message(query.message.chat.id, post["text"],
                         reply_markup=post["keyboard"])


@bot.message_handler(commands=["stat"])
def statistic(message):
    if message.from_user.id == 'id1' or message.from_user.id == 'id2':
        all_count = db.users_count()
        all_vata_count = db.vata_count()
        day_count = db.day_users_count()
        day_vata_count = db.day_vata_count()
        bot.send_message(message.from_user.id, f"<b>–Æ–∑–µ—Ä—ñ–≤ –≤ –±–∞–∑—ñ –∑–∞ –¥–µ–Ω—å: {day_count}"
                                               f"\n–ó –Ω–∏—Ö –û—Ç—Ä–∏–º–∞–ª–∏ –ø—Ä–∏–∑: {day_vata_count} </b>"
                                               f"\n\n<b>–í—Å—å–æ–≥–æ –Æ–∑–µ—Ä—ñ–≤ –≤ –±–∞–∑—ñ: {all_count}"
                                               f"\n–û—Ç—Ä–∏–º–∞–ª–∏ –ø—Ä–∏–∑: {all_vata_count} </b>"
                                                                 , parse_mode='html')




@bot.callback_query_handler(func=lambda query: query.data.startswith("?ans"))
def answered(query):
    user = db.get_user(query.message.chat.id)

    if user["is_passed"] or not user["is_passing"]:
        return

    user["answers"].append(int(query.data.split("&")[1]))
    db.set_user(query.message.chat.id, {"answers": user["answers"]})

    post = get_answered_message(user)
    if user['question_index'] < 8:
        bot.edit_message_text(post['text_tips'], query.message.chat.id, query.message.id, parse_mode='html')

    if post is not None:
        bot.send_message(query.message.chat.id, post["text"],
                         reply_markup=post["keyboard"], parse_mode='html', protect_content=True)


@bot.callback_query_handler(func=lambda query: query.data == "?next")
def next(query):
    user = db.get_user(query.message.chat.id)
    try:
        bot.delete_message(query.message.chat.id, query.message.id - 1)
    except:
        pass


    user["question_index"] += 1
    db.set_user(query.message.chat.id, {"question_index": user["question_index"]})

    post = get_question_message(user)
    if post['sticker'] is not None:
        bot.send_sticker(query.message.chat.id, post['sticker'], protect_content=True)
    if post is not None:
        bot.edit_message_text(post["text"], query.message.chat.id, query.message.id,
                              reply_markup=post["keyboard"], parse_mode='html')


@bot.message_handler(content_types=["sticker"])
def repeat_all_messages(message):  
    file_info = message.sticker.file_id
    print(file_info)



def get_question_message(user):
    questions_count = db.questions_count(user['category'])
    if user["question_index"] == questions_count:
        count = 0
        for question_index, question in enumerate(db.questions.find({"category": user['category']})):
            if question["correct"] == user["answers"][question_index]:
                count += 1


        if count < 7:
            smile = (
                "üò• \n–î—Ä—É–∂–µ, –¥—É–∂–µ —à–∫–æ–¥–∞ —Ç–∞ –≤ —Ü–µ–π —Ä–∞–∑ —Ç–æ–±—ñ –Ω–µ –≤–¥–∞–ª–æ—Å—è –¥–∞—Ç–∏ –º—ñ–Ω—ñ–º—É–º 7-8 –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ –ì–µ–¥–∑—å–æ –ë—É—Ä–±–µ–ª—è. "
                "–ê–ª–µ —Ü–µ –Ω–µ –æ–∑–Ω–∞—á–∞—î, —â–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–∑—É –Ω–µ –ø–æ—â–∞—Å—Ç–∏—Ç—å. –ë—É–¥—å —É–≤–∞–∂–Ω—ñ—à–∏–º —ñ –≤—ñ—Ä–∏–º–æ –≤ –∫—Ä–∞—â–µ! ")
            sticker = '4XTUE'
        else:
            smile = ("üòé \n–¢–∏ –æ—Ç—Ä–∏–º—É—î—à —Ç–∞–∫–∏–π –±–∞–∂–∞–Ω–∏–π –ø–æ–¥–∞—Ä—É–Ω–æ–∫ - –∞–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ –∫–∞–∫–∞–æ —Ç–∞ —Ç—ñ—Å—Ç–µ—á–∫–æ."
                     "\n–ü—ñ–¥—Ö–æ–¥—å —É –¶—É–∫–µ—Ä–Ω—é —Ç–∞ –ø–æ–∫–∞–∂–∏ —ó–π —Ü–µ–π –ø–µ—Ä–µ–º–æ–∂–Ω–∏–π —Å–º–∞–π–ª–∏–∫ —ñ –≤–æ–Ω–∞ —Ç–æ–±—ñ –≤–∏–¥–∞—Å—Ç—å —Ç–≤—ñ–π –ø–æ–¥–∞—Ä—É–Ω–æ–∫. –ì–µ–¥–∑—å–æ –ë—É—Ä–±–µ–ª—å —Ç–µ–±–µ —â–∏—Ä–æ –≤—ñ—Ç–∞—î!")
            sticker = 'CAACAgIAAxkBAxk2BA'
            db.set_user(user["chat_id"], {"vata": True})

        text = f"–¢–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–≤ –Ω–∞ {count} –ø–∏—Ç–∞–Ω—å{smile}"
        db.set_user(user["chat_id"], {"is_passed": True, "is_passing": False})

        return {
            "text": text,
            "keyboard": None,
            "sticker": sticker,
        }

        question = db.get_question(user["question_index"], user["category"])


    if question is None:
        return

    keyboard = telebot.types.InlineKeyboardMarkup()
    for answer_index, answer in enumerate(question["answers"]):
        keyboard.row(telebot.types.InlineKeyboardButton(f"{chr(answer_index + 97)}) {answer}",
                                                        callback_data=f"?ans&{answer_index}"))

    text = f"–ü–∏—Ç–∞–Ω–Ω—è ‚Ññ{user['question_index'] + 1}\n\n{question['text']}"

    return {
        "text": text,
        "keyboard": keyboard,
        "sticker": None,
    }


def get_answered_message(user):
    question = db.get_question(user["question_index"], user["category"])
    tips = db.get_question(user["question_index"], user["category"])
    tips = tips["tips"]
    if user["question_index"] < 7:
        go_next = '—Ç–∞ –∑–∞–∫–ª–∏–∫–∞—î —Ä—É—Ö–∞—Ç–∏—Å—è –¥–∞–ª—ñ'
        text_button = (f"üôå–ó–Ω–∞–π—à–æ–≤ –ª–µ–≥–µ–Ω–¥—É, –æ–∑–Ω–∞–π–æ–º–∏–≤—Å—è –∑ –Ω–µ—é —ñ –≥–æ—Ç–æ–≤–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è‚ùì‚ùì‚ùì")
    else:
        go_next = ''
        text_button = ('–û—Ç—Ä–∏–º–∞–π —Å–≤–æ—ó —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏!')
    text_tips = (
        f"–ì–µ–¥–∑—å–æ –ë—É—Ä–±–µ–ª—å –æ—Ç—Ä–∏–º–∞–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è ‚Ññ{user['question_index'] + 1} ‚úÖ\n {go_next}üòâ\n\n <i>{tips}</i> ")

    keyboard = telebot.types.InlineKeyboardMarkup()
    if user["question_index"] == 7:
        button_text = '–ó–∞–∫—ñ–Ω—á–∏—Ç–∏ –∫–≤–µ—Å—Ç'
    else:
        button_text = '–ó–∞–ø–∏—Ç–∞–Ω–Ω—è'
    keyboard.row(telebot.types.InlineKeyboardButton(button_text, callback_data="?next"))

    return {
        "text": text_button,
        "text_tips": text_tips,
        "keyboard": keyboard
    }


bot.polling()
