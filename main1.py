import time

import telebot
from pymongo import MongoClient
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

bot = telebot.TeleBot("6666846921:AAGJU9TIBKHBlRfK2uCijCKvRH1tSCsqWVg")


class DataBase:
    def __init__(self):
        cluster = MongoClient(
            "mongodb+srv://gedzio:YjnM5vHkkE4SUk4Y@cluster0.yuqwjae.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0")
        self.db = cluster["QuizBot"]
        self.users = self.db["Users"]
        self.questions = self.db["Questions"]
        self.questions_count = len(list(self.questions.find({})))

    def get_user(self, chat_id):
        user = self.users.find_one({"chat_id": chat_id})

        if user is not None:
            return user

        user = {
            "chat_id": chat_id,
            "is_passing": False,
            "is_passed": False,
            "question_index": None,
            "category": None,
            "answers": []
        }
        print(user)

        self.users.insert_one(user)

        return user

    def set_user(self, chat_id, update):
        self.users.update_one({"chat_id": chat_id}, {"$set": update})

    def get_question(self, index,category):
        print('ind',index, category)
        return self.questions.find_one({"question": index, "category": category})

    #def get_tips(self, index):
        #return self.


db = DataBase()


@bot.message_handler(commands=["start"])
def start(message):
    user = db.get_user(message.chat.id)
    print(user)
   #checking of second activity
   # if user["is_passed"]:
       # bot.send_message(message.from_user.id, "–î—Ä—É–∂–µ, —Ç–∏ –≤–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–≤ —Ü–µ–π –∫–≤–µ—Å—Çüò• \n–†–µ–∂–∏–º –ß—ñ—Ç–µ—Ä–∞ –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ")
       # return

    # if user["is_passing"]:
    #	return

    bot.send_message(message.from_user.id,
                     '''
                     –ü—Ä–∏–≤—ñ—Ç —é–Ω–∏–π —à—É–∫–∞—á—É –ø—Ä–∏–≥–æ–¥, –º–µ–Ω–µ –∑–≤–∞—Ç–∏ –ì–µ–¥–∑—å–æ –ë—É—Ä–±–µ–ª—å —ñ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–∞ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó –û–±—ñ–Ω–æ—Ä—É —è –∑–∞—Ö–æ–≤–∞–≤ –¥–ª—è —Ç–µ–±–µ —Å–∫–∞—Ä–±, —è–∫–∏–π —Å–∞–º –æ–±–æ–∂–Ω—é—é –≤—ñ–¥ —â–∏—Ä–æ–≥–æ —Å–µ—Ä—Ü—è. 
–ó–∞—Ä–∞–∑ —Ç–∏ –∑–Ω–∞—Ö–æ–¥–∏—à—Å—è –Ω–∞ –ø–æ—á–∞—Ç–∫—É –Ω–∞—à–æ—ó –ø–æ–¥–æ—Ä–æ–∂—ñ —É –ø–æ—à—É–∫–∞—Ö –µ–ª—å—Ñ—ñ–π—Å—å–∫–∏—Ö —Å–∫–∞—Ä–±—ñ–≤.''')
    # bot.send_photo(message.from_user.id, "https://cdn.pixabay.com/photo/2024/05/05/11/47/nature-8741046_960_720.jpg")
    bot.send_sticker(message.from_user.id,"CAACAgIAAxkBAAIE9WbArtJNuJffgO6fxkJjEbCGvZyzAALnWAACh9PRScaRmqGg_zL5NQQ")
    keyboard = [

            [InlineKeyboardButton("–†–æ–∑–ø–æ—á–∞—Ç–∏ –∫–≤–µ—Å—Ç", callback_data="rules")],
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    bot.send_message(message.from_user.id, "–ì–æ—Ç–æ–≤–∏–π —Ä–æ–∑–ø–æ—á–∞—Ç–∏?",
                     reply_markup=reply_markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("rules"))
def category(query):
    user = db.get_user(query.message.chat.id)
    bot.send_message(query.message.chat.id, '''–Ü—Å–Ω—É—î 5 —Ä—ñ–∑–Ω–∏—Ö —à–ª—è—Ö—ñ–≤ –¥–æ —Å–∫–∞—Ä–±—É. –û–±–∏—Ä–∞–π —Å–≤—ñ–π —Ç–∞ –ø—Ä–∏—Ç—Ä–∏–º—É–π—Å—è —Ç—ñ–ª—å–∫–∏ –π–æ–≥–æ. 
    –ó–∞–≤–¥–∞–Ω–Ω—è –∫–≤–µ—Å—Ç—É ‚Äì —Ü–µ –¥–∞—Ç–∏ 8 –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ Telegram-–±–æ—Ç—É.
    ‚ùóÔ∏è–í—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —Ü—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –º–æ–∂–Ω–∞ –∑–Ω–∞–π—Ç–∏ —É –∑–∞—Å–µ–∫—Ä–µ—á–µ–Ω–∏—Ö –ª–µ–≥–µ–Ω–¥–∞—Öüìú, —è–∫—ñ –∑–∞—Ö–æ–≤–∞–Ω—ñ –∑–∞ –∫—é–∞—Ä –∫–æ–¥–∞–º–∏. 
    –ê –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –∫—é–∞—Ä –∫–æ–¥–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ —à—É–∫–∞—Ç–∏ –∑–∞ –ø—ñ–¥–∫–∞–∑–∫–∞–º–∏ –∑ –Ω–∞—à–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É.''')


    bot.send_message(query.message.chat.id, '''
    –ö–æ–∂–µ–Ω –≤—ñ–¥—á–∞–π–¥—É—Ö–∞ –∑–∞—Å–ª—É–≥–æ–≤—É—î –Ω–∞ —Å–≤—ñ–π –ø—Ä–∏–∑ —ñ —Ç–∏ –π–æ–≥–æ —Ç–µ–∂ –≤—ñ–¥—à—É–∫–∞—î—à. 
<b>–°–ø–æ—á–∞—Ç–∫—É –¥–µ–∫—ñ–ª—å–∫–∞ –ø—Ä–∞–≤–∏–ª:
1. –£–≤–∞–∂–Ω–æ —á–∏—Ç–∞–π —É–≤–µ—Å—å —Ç–µ–∫—Å—Ç.
2. –¶–µ–π –∫–≤–µ—Å—Ç —Ç—Ä–µ–±–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç–∏ –ø–æ-–æ–¥–Ω–æ–º—É —É—á–∞—Å–Ω–∏–∫—É. –ü–æ-–ø—Ä–∏–Ω—Ü–∏–ø—É ¬´–æ–¥–∏–Ω —É—á–∞—Å–Ω–∏–∫ ‚Äì –æ–¥–∏–Ω –ø–µ—Ä–µ–º–æ–∂–µ—Ü—å¬ª.
3. –ë—É–¥—å –æ–±–µ—Ä–µ–∂–Ω–∏–º —Ç–∞ –Ω–µ –ø–æ—Ä—É—à—É–π –ø—Ä–∞–≤–∏–ª –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ –Ω–∞ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó –ø–∞—Ä–∫—É. </b> 
                         
    ''', parse_mode='html')

    db.set_user(query.message.chat.id, {"question_index": 0})

    user = db.get_user(query.message.chat.id)

    keyboard = [

            [InlineKeyboardButton("1. –ü–µ—Ä–µ–ª—ñ—Ç –ñ–∞–±–æ–∫—Ä–∏–ª–∞", callback_data="cat1")],
            [InlineKeyboardButton("2. –í–µ—Å–µ–ª–∫–∞ —Ç—Ä–æ–ª—ñ–≤", callback_data="cat2")],
        [InlineKeyboardButton("3. –ú–µ—Ä–µ—Ö—Ç—ñ–Ω–Ω—è –µ–ª—å—Ñ—ñ–≤", callback_data="cat3")],
            [InlineKeyboardButton("4. –°—Ç–µ–∂–∫–∞ –ì—Ä–∏–±–º–µ–¥—è", callback_data="cat4")],
            [InlineKeyboardButton("5. –î—Ä–∞–∫–æ–Ω—è—á—ñ –ø–∞–≥–æ—Ä–±–∏", callback_data="cat5")]

    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    bot.send_message(query.message.chat.id, "–û–±–µ—Ä–∏ —Å–≤—ñ–π –º–∞—Ä—à—Ä—É—Ç –∫–≤–µ—Å—Ç—É:",
                     reply_markup=reply_markup)


# post = get_category(user)
# if post is not None:
# bot.send_message(message.from_user.id, post["text"], reply_markup=post["keyboard"])




@bot.callback_query_handler(func=lambda call:call.data.startswith("cat"))
def category(query):
    user = db.get_user(query.message.chat.id)
    if query.data == "cat1":
        index_of_category = 0
        bot.send_sticker(query.message.chat.id, 'CAACAgIAAxkBAAIFJWbAskH-Swer80QDoYuHQLVpJ8NGAAKJVAAClgbRSUUqrGoj-GKJNQQ')
        bot.send_message(query.message.chat.id,
                         '''
<b>–ü—ñ–¥–∫–∞–∑–∫–∞, –¥–µ —à—É–∫–∞—Ç–∏ –ø–µ—Ä—à—É –ª–µ–≥–µ–Ω–¥—É:</b>
\n<i>–ë—ñ–ª—è –≤–∞—Ç—Ä–∏ —Ç—Ä–æ–ª—ñ –∑—ñ–±—Ä–∞–ª–∏—Å—å –≤–Ω–æ—á—ñ, 
–õ–µ–≥–µ–Ω–¥–∏ —Å—Ç–∞—Ä—ñ —Ä–æ–∑–ø–æ–≤—ñ–¥–∞–ª–∏ –≤–æ–Ω–∏.
–í–æ–≥–æ–Ω—å —Ç–∞–Ω—Ü—é—î –≤ —ó—Ö–Ω—ñ—Ö –æ—á–∞—Ö,
–ó–≤—É–∫ —ó—Ö–Ω—ñ—Ö —Å–ª—ñ–≤ –ª—É–Ω–∞–≤ —É –≥–æ—Ä–∞—Ö.
–®—É–∫–∞–π –Ω–∞—Å—Ç—É–ø–Ω—É –ø—ñ–¥–∫–∞–∑–∫—É —É –º—ñ—Å—Ü—ñ –∑–±–æ—Ä—É —Ç—Ä–æ–ª—ñ–≤‚Ä¶</i>
                         ''', parse_mode='html')
    elif query.data == "cat2":
        index_of_category = 1
    elif query.data == "cat3":
        index_of_category = 2
    db.set_user(query.message.chat.id, {"question_index": 0, "category":index_of_category, "is_passing": True})
    user["question_index"] = 0
    user["category"] = index_of_category

    keyboard = [

            [InlineKeyboardButton("–ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data="first")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    bot.send_message(query.message.chat.id, "üôå–ó–Ω–∞–π—à–æ–≤ –ª–µ–≥–µ–Ω–¥—É, –æ–∑–Ω–∞–π–æ–º–∏–≤—Å—è –∑ –Ω–µ—é —ñ –≥–æ—Ç–æ–≤–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è‚ùì‚ùì‚ùì",
                     reply_markup=reply_markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("first"))
def first_question(query):
    user = db.get_user(query.message.chat.id)
    post = get_question_message(user)
    print(post)
    if post is not None:
        bot.send_message(query.message.chat.id, post["text"],
                              reply_markup=post["keyboard"])


@bot.callback_query_handler(func=lambda query: query.data.startswith("?ans"))
def answered(query):
    user = db.get_user(query.message.chat.id)

    if user["is_passed"] or not user["is_passing"]:
        return

    user["answers"].append(int(query.data.split("&")[1]))
    db.set_user(query.message.chat.id, {"answers": user["answers"]})


    post = get_answered_message(user)
    bot.edit_message_text( post['text_tips'],query.message.chat.id,query.message.id, parse_mode='html')

    if post is not None:
        bot.send_message( query.message.chat.id, post["text"],
                              reply_markup=post["keyboard"], parse_mode='html')


@bot.callback_query_handler(func=lambda query: query.data == "?next")
def next(query):
    user = db.get_user(query.message.chat.id)

    if user["is_passed"] or not user["is_passing"]:
        return

    user["question_index"] += 1
    print(user["question_index"])
    db.set_user(query.message.chat.id, {"question_index": user["question_index"]})



    post = get_question_message(user)
    print(post)
    if post['sticker'] is not None:
        bot.send_sticker()
    if post is not None:
        bot.edit_message_text(post["text"], query.message.chat.id, query.message.id,
                              reply_markup=post["keyboard"], parse_mode='html')



@bot.message_handler(content_types=["sticker"])
def repeat_all_messages(message): # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –∏–≥—Ä–∞–µ—Ç –Ω–∏–∫–∞–∫–æ–π —Ä–æ–ª–∏
    file_info = message.sticker.file_id
    print(file_info)


def get_question_message(user):
    if user["question_index"] == db.questions_count:
        count = 0
        for question_index, question in enumerate(db.questions.find({})):
            print("qu in, ques:",question_index, question)
            print(user["answers"][question_index])
            if question["correct"] == user["answers"][question_index]:
                count += 1
                print(user["answers"][question_index])
        all_marks = db.questions_count

        if count < all_marks - 1:
            smile = ("üò• \n–î—Ä—É–∂–µ, –¥—É–∂–µ —à–∫–æ–¥–∞ —Ç–∞ –≤ —Ü–µ–π —Ä–∞–∑ —Ç–æ–±—ñ –Ω–µ –≤–¥–∞–ª–æ—Å—è –¥–∞—Ç–∏ –º—ñ–Ω—ñ–º—É–º –≤—ñ—Å—ñ–º –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ –ì–µ–¥–∑—å–æ –ë—É—Ä–±–µ–ª—è. "
                     "–ê–ª–µ —Ü–µ –Ω–µ –æ–∑–Ω–∞—á–∞—î, —â–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–∑—É –Ω–µ –ø–æ—â–∞—Å—Ç–∏—Ç—å. –ë—É–¥—å —É–≤–∞–∂–Ω—ñ—à–∏–º —ñ –≤—ñ—Ä–∏–º–æ –≤ –∫—Ä–∞—â–µ! ")
            sticker ='CAACAgIAAxkBAAIE52a7N5OlnGhGy0jEbnMAASjbG3HGBwAC51gAAofT0UnGkZqhoP8y-TUE'
        else:
            smile = ("üòé \n–¢–∏ –æ—Ç—Ä–∏–º—É—î—à —Ç–∞–∫–∏–π –±–∞–∂–∞–Ω–∏–π –ø–æ–¥–∞—Ä—É–Ω–æ–∫ ‚Äì –∞–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—É —Ü—É–∫—Ä–æ–≤—É –≤–∞—Ç—É. "
                     "–ü—ñ–¥—Ö–æ–¥—å –¥–æ –µ–ª—å—Ñ—ñ–π–∫–∏, —è–∫–∞ —Ä–æ–±–∏—Ç—å —ó—ó –ø–æ—Ä—É—á –∑ –¶—É–∫–µ—Ä–Ω–µ—é —Ç–∞ –ø–æ–∫–∞–∂–∏ —ó—Ö —Ü–µ–π –ø–µ—Ä–µ–º–æ–∂–Ω–∏–π —Å–º–∞–π–ª–∏–∫. –ì–µ–¥–∑—å–æ –ë—É—Ä–±–µ–ª—å —Ç–µ–±–µ —â–∏—Ä–æ –≤—ñ—Ç–∞—î!")

        text = f"–¢–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–≤ –Ω–∞ {count} –ø–∏—Ç–∞–Ω—å{smile}"

        db.set_user(user["chat_id"], {"is_passed": True, "is_passing": False})

        return {
            "text": text,
            "keyboard": None,
            "sticker": sticker,
        }

    print('user:',user)
    print('user category:',user["category"])
    print('user index:',user["question_index"])
    question = db.get_question(user["question_index"],user["category"])
    print(question)

    if question is None:
        return

    keyboard = telebot.types.InlineKeyboardMarkup()
    for answer_index, answer in enumerate(question["answers"]):
        keyboard.row(telebot.types.InlineKeyboardButton(f"{chr(answer_index + 97)}) {answer}",
                                                        callback_data=f"?ans&{answer_index}"))

    text = f"–ü–∏—Ç–∞–Ω–Ω—è ‚Ññ{user['question_index']+1}\n\n{question['text']}"


    return {
        "text": text,
        "keyboard": keyboard,
        "sticker": None,
    }


def get_answered_message(user):
    question = db.get_question(user["question_index"],user["category"])
    print(question)
    tips = db.get_question(user["question_index"],user["category"])
    tips = tips["tips"]
    text_tips = (f"–ì–µ–¥–∑—å–æ –ë—É—Ä–±–µ–ª—å –æ—Ç—Ä–∏–º–∞–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è ‚Ññ{user['question_index']+1} ‚úÖ\n—Ç–∞ –∑–∞–∫–ª–∏–∫–∞—î —Ä—É—Ö–∞—Ç–∏—Å—è –¥–∞–ª—ñüòâ\n\n <i>{tips}</i> ")



    text_button = (f"üôå–ó–Ω–∞–π—à–æ–≤ –ª–µ–≥–µ–Ω–¥—É, –æ–∑–Ω–∞–π–æ–º–∏–≤—Å—è –∑ –Ω–µ—é —ñ –≥–æ—Ç–æ–≤–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è‚ùì‚ùì‚ùì")

    keyboard = telebot.types.InlineKeyboardMarkup()
    if user["question_index"] == db.questions_count-1:
        button_text = '–ó–∞–∫—ñ–Ω—á–∏—Ç–∏ –∫–≤–µ—Å—Ç'
    else:
        button_text = '–ó–∞–ø–∏—Ç–∞–Ω–Ω—è'
    keyboard.row(telebot.types.InlineKeyboardButton(button_text, callback_data="?next"))

    return {
        "text": text_button,
        "text_tips": text_tips,
        "keyboard": keyboard
    }


bot.polling()
